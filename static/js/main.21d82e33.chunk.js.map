{"version":3,"sources":["screen/Employee/index.tsx","route/index.ts","screen/Home/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["EmployeeScreen","state","data","err","axios","get","then","response","console","log","setState","catch","this","map","a","React","Component","routes","path","name","component","navigate","props","history","push","onClick","App","className","basename","prop","key","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"+TAGqBA,E,4MAEjBC,MAAQ,CACJC,KAAM,GACNC,IAAK,I,kEAGY,IAAD,OAChBC,IAAMC,IAAI,sDACLC,MAAK,SAACC,GACHC,QAAQC,IAAI,WAAYF,EAASL,KAAKA,MACtC,EAAKQ,SAAS,CAAER,KAAMK,EAASL,KAAKA,UAEvCS,OAAM,SAACR,GACJK,QAAQC,IAAI,MAAON,GACnB,EAAKO,SAAS,CAAEP,IAAKA,S,+BAK7B,OACI,2CAEI,6BAAMS,KAAKX,MAAME,KACjB,6BACKS,KAAKX,MAAMC,KAAKW,KAAI,SAAAC,a,GAzBGC,IAAMC,WCArCC,G,MAAS,CAClB,CACIC,KAAM,YAAaC,KAAM,iBAAkBC,UAAWpB,GAE1D,CACIkB,KAAM,IAAKC,KAAM,aAAcC,U,4MCHnCC,SAAW,WAEP,EAAKC,MAAMC,QAAQC,KAAK,c,uDAIxB,OACI,6BACI,2CAGA,6BACI,4BAAQC,QAASb,KAAKS,UAAtB,8B,GAdoBN,IAAMC,cCmB/BU,MAhBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,CAAQC,SAAS,KACf,kBAAC,IAAD,KAEIX,EAAOJ,KAAI,SAACgB,EAAMC,GAChB,OAAO,kBAAC,IAAD,CAAOZ,KAAMW,EAAKX,KAAMY,IAAKA,EAAKV,UAAWS,EAAKT,mBCDjEW,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACThC,MAAK,SAAAqC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,YAI1BxC,QAAQC,IACN,iHAKE8B,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBnC,QAAQC,IAAI,sCAGR8B,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BhC,OAAM,SAAAwC,GACL3C,QAAQ2C,MAAM,4CAA6CA,MClGjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiBnB,SAAkBjB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIiB,IACpBC,YACAzB,OAAOC,SAASyB,MAEJC,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,QAAQ,WAC9B,IAAMvB,EAAK,UAAMoB,YAAN,sBAEP3B,IAgEV,SAAiCO,EAAeC,GAE9CuB,MAAMxB,EAAO,CACXyB,QAAS,CAAE,iBAAkB,YAE5BzD,MAAK,SAAAC,GAEJ,IAAMyD,EAAczD,EAASwD,QAAQ1D,IAAI,gBAEnB,MAApBE,EAAS0D,QACO,MAAfD,IAA8D,IAAvCA,EAAYE,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAM7D,MAAK,SAAAqC,GACjCA,EAAayB,aAAa9D,MAAK,WAC7B2B,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1B5B,OAAM,WACLH,QAAQC,IACN,oEAvFA6D,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAM7D,MAAK,WACjCE,QAAQC,IACN,iHAMJ4B,EAAgBC,EAAOC,OC1C/BE,K","file":"static/js/main.21d82e33.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios'\n\nexport default class EmployeeScreen extends React.Component {\n\n    state = {\n        data: [],\n        err: ''\n    }\n\n    componentDidMount() {\n        axios.get('\thttp://dummy.restapiexample.com/api/v1/employees')\n            .then((response) => {\n                console.log('response', response.data.data)\n                this.setState({ data: response.data.data })\n            })\n            .catch((err) => {\n                console.log('err', err)\n                this.setState({ err: err })\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                Hello Adamo\n                <div>{this.state.err}</div>\n                <div>\n                    {this.state.data.map(a => {\n                        return (\n                            //@ts-ignore\n                            <div className=\"name\" key={a.id}>Name: {a.employee_name}</div>\n                        )\n                    })}\n                </div>\n            </div>\n        )\n    }\n}","import EmployeeScreen from '../screen/Employee'\nimport HomeScreen from '../screen/Home'\n\nexport const routes = [\n    {\n        path: '/employee', name: \"EmployeeScreen\", component: EmployeeScreen\n    },\n    {\n        path: '/', name: \"HomeScreen\", component: HomeScreen\n    }\n]","import React from 'react';\nimport \"../../assets/css/style.scss\";\n\nexport default class HomeScreen extends React.Component {\n\n    navigate = () => {\n        //@ts-ignore\n        this.props.history.push('/employee')\n    }\n\n    render() {\n        return (\n            <div>\n                <div>\n                    HomeScreen\n            </div>\n                <div>\n                    <button onClick={this.navigate}>Navigate to Employee</button>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { routes } from './route';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router basename=\"/\">\n        <Switch>\n          {\n            routes.map((prop, key) => {\n              return <Route path={prop.path} key={key} component={prop.component} />;\n            })\n          }\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}